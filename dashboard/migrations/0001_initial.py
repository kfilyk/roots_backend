# Generated by Django 4.0.4 on 2022-11-16 20:55

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.CharField(db_column='d_id', max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='d_name', max_length=45, null=True)),
                ('registration_date', models.DateTimeField(auto_now_add=True, db_column='d_registration_date')),
                ('last_update', models.DateTimeField(blank=True, db_column='d_last_update', null=True)),
                ('mac_address', models.CharField(blank=True, db_column='d_mac_address', max_length=45, null=True)),
                ('model', models.CharField(blank=True, db_column='d_model', max_length=45, null=True)),
                ('fill_res_flag', models.BooleanField(db_column='d_fill_res_flag', default=False)),
                ('capacity', models.IntegerField(db_column='d_capacity', default=5)),
                ('is_online', models.BooleanField(db_column='d_is_online', default=False)),
                ('user', models.ForeignKey(blank=True, db_column='d_user_id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'device',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(db_column='e_id', primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(blank=True, db_column='e_start_date', null=True)),
                ('end_date', models.DateTimeField(blank=True, db_column='e_end_date', null=True)),
                ('status', models.IntegerField(db_column='e_status', default=0)),
                ('day', models.IntegerField(db_column='e_day', default=0)),
                ('phase_day', models.IntegerField(db_column='e_phase_day', default=0)),
                ('name', models.CharField(blank=True, db_column='e_name', max_length=128, null=True)),
                ('phase_number', models.IntegerField(db_column='e_phase_number', default=0)),
                ('score', models.DecimalField(blank=True, db_column='e_score', decimal_places=2, max_digits=2, null=True)),
                ('description', models.CharField(blank=True, db_column='e_description', max_length=1024, null=True)),
                ('device', models.ForeignKey(db_column='e_device_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dashboard.device')),
            ],
            options={
                'db_table': 'experiment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ExperimentReading',
            fields=[
                ('id', models.AutoField(db_column='er_id', primary_key=True, serialize=False)),
                ('water_level', models.IntegerField(blank=True, db_column='er_water_level', null=True)),
                ('reading_date', models.DateTimeField(auto_now_add=True, db_column='er_reading_date')),
                ('electrical_conductance', models.IntegerField(blank=True, db_column='er_electrical_conductance', null=True)),
                ('reservoir_ph', models.DecimalField(blank=True, db_column='er_reservoir_ph', decimal_places=1, max_digits=3, null=True)),
                ('temperature', models.IntegerField(blank=True, db_column='er_temperature', null=True)),
                ('humidity', models.IntegerField(blank=True, db_column='er_humidity', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('experiment_phase', models.IntegerField(blank=True, db_column='er_experiment_phase', null=True)),
                ('failed_pump', models.BooleanField(db_column='er_failed_pump', default=0)),
                ('flushed_reservoir', models.BooleanField(db_column='er_flushed_reservoir', default=0)),
                ('raised_light', models.BooleanField(db_column='er_raised_light', default=0)),
                ('experiment', models.ForeignKey(blank=True, db_column='er_experiment_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.experiment')),
            ],
            options={
                'db_table': 'experiment_reading',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NutrientRecipe',
            fields=[
                ('id', models.CharField(db_column='nr_id', max_length=45, primary_key=True, serialize=False)),
                ('json_data', models.JSONField(db_column='nr_data')),
            ],
            options={
                'db_table': 'nutrient_recipe',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.AutoField(db_column='ph_id', primary_key=True, serialize=False)),
                ('type', models.CharField(db_column='ph_type', max_length=45)),
                ('days', models.IntegerField(db_column='ph_days')),
                ('blue_intensity', models.IntegerField(db_column='ph_blue_intensity')),
                ('red_intensity', models.IntegerField(db_column='ph_red_intensity')),
                ('lights_on_hours', models.IntegerField(db_column='ph_lights_on_hours')),
                ('white_intensity', models.IntegerField(db_column='ph_white_intensity')),
                ('watering_duration', models.IntegerField(db_column='ph_watering_duration')),
                ('waterings_per_day', models.IntegerField(db_column='ph_waterings_per_day')),
                ('score', models.DecimalField(blank=True, db_column='ph_score', decimal_places=2, max_digits=2, null=True)),
            ],
            options={
                'db_table': 'phase',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.CharField(db_column='pl_id', max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='pl_name', max_length=45, null=True)),
                ('species', models.CharField(blank=True, db_column='pl_species', max_length=45, null=True)),
                ('profile', models.CharField(blank=True, db_column='pl_profile', max_length=1024, null=True)),
                ('growing_tips', models.CharField(blank=True, db_column='pl_growing_tips', max_length=1024, null=True)),
                ('harvesting_tips', models.CharField(blank=True, db_column='pl_harvesting_tips', max_length=1024, null=True)),
                ('ideal_days_to_harvest', models.IntegerField(blank=True, db_column='pl_ideal_days_to_harvest', null=True)),
                ('ideal_ec_max', models.DecimalField(blank=True, db_column='pl_ideal_ec_max', decimal_places=2, max_digits=2, null=True)),
                ('ideal_ec_min', models.DecimalField(blank=True, db_column='pl_ideal_ec_min', decimal_places=2, max_digits=2, null=True)),
                ('ideal_humidity_max', models.IntegerField(blank=True, db_column='pl_ideal_humidity_max', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ideal_humidity_min', models.IntegerField(blank=True, db_column='pl_ideal_humidity_min', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ideal_ph_max', models.DecimalField(blank=True, db_column='pl_ideal_ph_max', decimal_places=2, max_digits=2, null=True)),
                ('ideal_ph_min', models.DecimalField(blank=True, db_column='pl_ideal_ph_min', decimal_places=2, max_digits=2, null=True)),
                ('ideal_temp_max', models.IntegerField(blank=True, db_column='pl_ideal_temp_max', null=True)),
                ('ideal_temp_min', models.IntegerField(blank=True, db_column='pl_ideal_temp_min', null=True)),
                ('ideal_water_temp_max', models.IntegerField(blank=True, db_column='pl_ideal_water_temp_max', null=True)),
                ('ideal_water_temp_min', models.IntegerField(blank=True, db_column='pl_ideal_water_temp_min', null=True)),
                ('ideal_days_to_sprout_max', models.IntegerField(blank=True, db_column='pl_ideal_days_to_sprout_max', null=True)),
                ('ideal_days_to_sprout_min', models.IntegerField(blank=True, db_column='pl_ideal_days_to_sprout_min', null=True)),
                ('score', models.DecimalField(blank=True, db_column='pl_score', decimal_places=2, max_digits=2, null=True)),
                ('germination_rate', models.IntegerField(blank=True, db_column='pl_germination_rate', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('flower_count', models.IntegerField(blank=True, db_column='pl_flower_count', null=True)),
                ('flower_quality', models.IntegerField(blank=True, db_column='pl_flower_quality', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fruit_ripe_count', models.IntegerField(blank=True, db_column='pl_fruit_ripe_count', null=True)),
                ('fruit_unripe_count', models.IntegerField(blank=True, db_column='pl_fruit_unripe_count', null=True)),
                ('harvest_count', models.IntegerField(blank=True, db_column='pl_harvest_count', null=True)),
                ('harvest_quality', models.IntegerField(blank=True, db_column='pl_harvest_quality', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('harvest_weight', models.DecimalField(blank=True, db_column='pl_harvest_weight', decimal_places=2, max_digits=5, null=True)),
                ('bgp_distance_max', models.IntegerField(blank=True, db_column='pl_bgp_distance_max', null=True)),
                ('bgp_distance_min', models.IntegerField(blank=True, db_column='pl_bgp_distance_min', null=True)),
                ('bud_count_max', models.IntegerField(blank=True, db_column='pl_bud_count_max', null=True)),
                ('bud_count_min', models.IntegerField(blank=True, db_column='pl_bud_count_min', null=True)),
                ('days_to_harvest_max', models.IntegerField(blank=True, db_column='pl_days_to_harvest_max', null=True)),
                ('days_to_harvest_min', models.IntegerField(blank=True, db_column='pl_days_to_harvest_min', null=True)),
                ('final_height_max', models.IntegerField(blank=True, db_column='pl_final_height_max', null=True)),
                ('final_height_min', models.IntegerField(blank=True, db_column='pl_final_height_min', null=True)),
                ('final_leaf_area_max', models.IntegerField(blank=True, db_column='pl_final_leaf_area_max', null=True)),
                ('final_leaf_area_min', models.IntegerField(blank=True, db_column='pl_final_leaf_area_min', null=True)),
                ('final_leaf_count_max', models.IntegerField(blank=True, db_column='pl_final_leaf_count_max', null=True)),
                ('final_leaf_count_min', models.IntegerField(blank=True, db_column='pl_final_leaf_count_min', null=True)),
                ('internode_distance_max', models.IntegerField(blank=True, db_column='pl_internode_distance_max', null=True)),
                ('internode_distance_min', models.IntegerField(blank=True, db_column='pl_internode_distance_min', null=True)),
                ('node_count_max', models.IntegerField(blank=True, db_column='pl_node_count_max', null=True)),
                ('node_count_min', models.IntegerField(blank=True, db_column='pl_node_count_min', null=True)),
                ('days_to_sprout_max', models.IntegerField(blank=True, db_column='pl_days_to_sprout_max', null=True)),
                ('days_to_sprout_min', models.IntegerField(blank=True, db_column='pl_days_to_sprout_min', null=True)),
            ],
            options={
                'db_table': 'plant',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Pod',
            fields=[
                ('id', models.AutoField(db_column='po_id', primary_key=True, serialize=False)),
                ('position', models.IntegerField(blank=True, db_column='po_position', null=True)),
                ('end_date', models.DateTimeField(blank=True, db_column='po_end_date', null=True)),
                ('score', models.DecimalField(blank=True, db_column='po_score', decimal_places=2, max_digits=2, null=True)),
                ('start_date', models.DateTimeField(blank=True, db_column='po_start_date', null=True)),
                ('seeds_planted', models.IntegerField(blank=True, db_column='po_seeds_planted', null=True)),
                ('phase', models.IntegerField(db_column='po_phase', default=0)),
                ('status', models.IntegerField(db_column='po_status', default=0)),
                ('experiment', models.ForeignKey(db_column='po_experiment_id', on_delete=django.db.models.deletion.CASCADE, to='dashboard.experiment')),
                ('plant', models.ForeignKey(db_column='po_plant_id', null=True, on_delete=django.db.models.deletion.PROTECT, to='dashboard.plant')),
            ],
            options={
                'db_table': 'pod',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.CharField(db_column='t_id', max_length=45, primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='t_name', max_length=45)),
            ],
            options={
                'db_table': 'tags',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(db_column='r_id', primary_key=True, serialize=False)),
                ('days', models.IntegerField(db_column='r_days')),
                ('name', models.CharField(db_column='r_name', default='NO RECIPE NAME', max_length=45)),
                ('recipe_json', models.JSONField(blank=True, db_column='r_recipe_json', null=True)),
                ('author', models.ForeignKey(blank=True, db_column='r_user_id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('phase1', models.ForeignKey(blank=True, db_column='r_phase1_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase1', to='dashboard.phase')),
                ('phase10', models.ForeignKey(blank=True, db_column='r_phase10_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase10', to='dashboard.phase')),
                ('phase2', models.ForeignKey(blank=True, db_column='r_phase2_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase2', to='dashboard.phase')),
                ('phase3', models.ForeignKey(blank=True, db_column='r_phase3_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase3', to='dashboard.phase')),
                ('phase4', models.ForeignKey(blank=True, db_column='r_phase4_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase4', to='dashboard.phase')),
                ('phase5', models.ForeignKey(blank=True, db_column='r_phase5_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase5', to='dashboard.phase')),
                ('phase6', models.ForeignKey(blank=True, db_column='r_phase6_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase6', to='dashboard.phase')),
                ('phase7', models.ForeignKey(blank=True, db_column='r_phase7_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase7', to='dashboard.phase')),
                ('phase8', models.ForeignKey(blank=True, db_column='r_phase8_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase8', to='dashboard.phase')),
                ('phase9', models.ForeignKey(blank=True, db_column='r_phase9_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='phase9', to='dashboard.phase')),
            ],
            options={
                'db_table': 'recipe',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PodReading',
            fields=[
                ('id', models.AutoField(db_column='pr_id', primary_key=True, serialize=False)),
                ('node_count', models.IntegerField(blank=True, db_column='pr_node_count', null=True)),
                ('internode_distance', models.DecimalField(blank=True, db_column='pr_internode_distance', decimal_places=2, max_digits=5, null=True)),
                ('leaf_count', models.IntegerField(blank=True, db_column='pr_leaf_count', null=True)),
                ('pest_coverage', models.IntegerField(blank=True, db_column='pr_pest_coverage', default=False, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('algae_coverage', models.IntegerField(blank=True, db_column='pr_algae_coverage', default=False, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('blight_coverage', models.IntegerField(blank=True, db_column='pr_blight_coverage', default=False, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('harvest_weight', models.DecimalField(blank=True, db_column='pr_harvest_weight', decimal_places=2, max_digits=5, null=True)),
                ('harvest_count', models.IntegerField(blank=True, db_column='pr_harvest_count', null=True)),
                ('harvest_quality', models.IntegerField(blank=True, db_column='pr_harvest_quality', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('flower_quality', models.IntegerField(blank=True, db_column='pr_flower_quality', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('comment', models.CharField(blank=True, db_column='pr_comment', max_length=255, null=True)),
                ('bud_count', models.IntegerField(blank=True, db_column='pr_bud_count', null=True)),
                ('flower_count', models.IntegerField(blank=True, db_column='pr_flower_count', null=True)),
                ('fruit_ripe_count', models.IntegerField(blank=True, db_column='pr_fruit_ripe_count', null=True)),
                ('fruit_unripe_count', models.IntegerField(blank=True, db_column='pr_fruit_unripe_count', null=True)),
                ('leaf_area_avg', models.DecimalField(blank=True, db_column='pr_leaf_area_avg', decimal_places=2, max_digits=5, null=True)),
                ('max_height', models.DecimalField(blank=True, db_column='pr_max_height', decimal_places=2, max_digits=5, null=True)),
                ('media_to_bgp', models.DecimalField(blank=True, db_column='pr_media_to_bgp', decimal_places=2, max_digits=5, null=True)),
                ('min_height', models.DecimalField(blank=True, db_column='pr_min_height', decimal_places=2, max_digits=5, null=True)),
                ('pod_phase', models.CharField(blank=True, db_column='pr_pod_phase', max_length=45, null=True)),
                ('score', models.DecimalField(blank=True, db_column='pr_score', decimal_places=2, max_digits=5, null=True)),
                ('germination_rate', models.IntegerField(blank=True, db_column='pr_germination_rate', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('days_to_germinate', models.IntegerField(blank=True, db_column='po_days_to_germinate', null=True)),
                ('pest_removal', models.BooleanField(db_column='pr_pest_removal', default=0)),
                ('pollinated', models.BooleanField(db_column='pr_pollinated', default=0)),
                ('prune_dead_foliage', models.BooleanField(db_column='pr_prune_dead_foliage', default=0)),
                ('prune_dead_heading', models.BooleanField(db_column='pr_prune_dead_heading', default=0)),
                ('prune_living_foliage', models.BooleanField(db_column='pr_prune_living_foliage', default=0)),
                ('prune_topped', models.BooleanField(db_column='pr_prune_topped', default=0)),
                ('prune_thinned', models.BooleanField(db_column='pr_prune_thinned', default=0)),
                ('removed_dome', models.BooleanField(db_column='pr_removed_dome', default=0)),
                ('trellis_adjustment', models.BooleanField(db_column='pr_trellis_adjustment', default=0)),
                ('image_link_1', models.URLField(blank=True, db_column='pr_image_link_1', null=True)),
                ('image_link_2', models.URLField(blank=True, db_column='pr_image_link_2', null=True)),
                ('image_link_3', models.URLField(blank=True, db_column='pr_image_link_3', null=True)),
                ('image_link_4', models.URLField(blank=True, db_column='pr_image_link_4', null=True)),
                ('experiment', models.ForeignKey(blank=True, db_column='pr_experiment_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.experiment')),
                ('experiment_reading', models.ForeignKey(blank=True, db_column='pr_experiment_reading_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.experimentreading')),
                ('pod', models.ForeignKey(blank=True, db_column='pr_pod_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.pod')),
            ],
            options={
                'db_table': 'pod_reading',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='phase',
            name='recipe',
            field=models.ForeignKey(db_column='ph_recipe_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.recipe'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='phase',
            field=models.ForeignKey(blank=True, db_column='e_phase_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dashboard.phase'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='recipe',
            field=models.ForeignKey(blank=True, db_column='e_recipe_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='dashboard.recipe'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='tags',
            field=models.ManyToManyField(blank=True, to='dashboard.tag'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='user',
            field=models.ForeignKey(blank=True, db_column='e_user_id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
